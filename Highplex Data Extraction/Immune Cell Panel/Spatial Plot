#Creates scatter plot containing 4 cell types (considering only single positives) from object data .csv file. 

import pandas as pd
import tkinter as tk
from tkinter import filedialog
import plotly.express as px

# Hide the main tkinter window
root = tk.Tk()
root.withdraw()

# Open file dialog
file_path = filedialog.askopenfilename(
    title="Select CSV file",
    filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
)

if file_path:
    df = pd.read_csv(file_path)
    print("CSV loaded successfully!")
    print("Columns:", list(df.columns))

    # Calculate center positions
    df['x_center'] = (df['XMin'] + df['XMax']) / 2
    df['y_center'] = (df['YMin'] + df['YMax']) / 2

    # Define filters
    filters = {
        'PanCK_only': (df['Cy5_PanCK Positive Classification'] > 0) & 
                      (df['Gold_CD19 Positive Classification'] == 0) & 
                      (df['Green#2_CD3 Positive Classification'] == 0) & 
                      (df['NarrowRed_CD68 Positive Classification'] == 0),
        'CD19_only': (df['Cy5_PanCK Positive Classification'] == 0) & 
                     (df['Gold_CD19 Positive Classification'] > 0) & 
                     (df['Green#2_CD3 Positive Classification'] == 0) & 
                     (df['NarrowRed_CD68 Positive Classification'] == 0),
        'CD3_only': (df['Cy5_PanCK Positive Classification'] == 0) & 
                    (df['Gold_CD19 Positive Classification'] == 0) & 
                    (df['Green#2_CD3 Positive Classification'] > 0) & 
                    (df['NarrowRed_CD68 Positive Classification'] == 0),
        'CD68_only': (df['Cy5_PanCK Positive Classification'] == 0) & 
                     (df['Gold_CD19 Positive Classification'] == 0) & 
                     (df['Green#2_CD3 Positive Classification'] == 0) & 
                     (df['NarrowRed_CD68 Positive Classification'] > 0),
    }

    # Prepare a DataFrame for Plotly
    plot_df = pd.DataFrame()
    for label, condition in filters.items():
        temp = df[condition].copy()
        temp['Cell_Type'] = label
        plot_df = pd.concat([plot_df, temp], ignore_index=True)

    # Create interactive scatter plot
    fig = px.scatter(
        plot_df,
        x='x_center',
        y='y_center',
        color='Cell_Type',
        title='Positions of Filtered Cell Types (center positions)',
        labels={'x_center': 'X Center', 'y_center': 'Y Center'},
        opacity=0.7
    )
    fig.update_layout(legend_title_text='Cell Type')
    fig.show()
else:
    print("No file selected.")
